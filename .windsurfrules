# SEO Content Optimizer

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
KeywordFusion is a modern SEO toolkit that helps content creators and marketers optimize their content through advanced keyword analysis.

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasAnalysis)
- Structure repository files as follows:

kw-fusion/
├── app/                      # Next.js app directory
│   ├── api/                  # API routes
│   │   └── keywords/        # Keyword-related endpoints
│   ├── layout.tsx           # Root layout
│   └── page.tsx             # Home page
├── components/              # React components
│   ├── features/           # Feature-specific components
│   │   ├── labs/          # Experimental features
│   │   │   ├── keyword-analysis/
│   │   │   ├── content-optimizer/
│   │   │   └── location-insights/
│   │   └── core/          # Core features
│   ├── shared/            # Shared components
│   │   ├── forms/        # Form components
│   │   └── ui/          # UI components
│   ├── navigation/        # Navigation components
│   └── ui/               # shadcn components
├── lib/                   # Utility functions
│   ├── hooks/            # Custom React hooks
│   ├── utils/            # Helper functions
│   └── constants/        # Shared constants
├── types/                # TypeScript types
│   ├── keywords.ts       # Keyword-related types
│   └── api.ts           # API-related types
├── styles/              # Global styles
└── public/             # Static assets


## Tech Stack

- Next.js
- React
- TypeScript
- Tailwind CSS
- Shadcn UI


## Client-Side Architecture

- Perform all SEO analysis on the client side
- Use React hooks for state management
- Implement real-time content analysis
- Handle location combinations in-memory
- Keep UI responsive during analysis


## Naming Conventions

- Use lowercase with dashes for directories (e.g., components/seo-analysis)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., KeywordAnalysis.tsx)
- Use camelCase for utility files (e.g., seoCalculator.ts)


## TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions


## Next.js Specific

- Use App Router conventions
- Implement proper server-side and client-side components
- Use appropriate data fetching methods (Server Components, Server Actions)
- Handle API routes properly in the app/api directory


## State Management

- Use React hooks for local state
- Implement proper state lifting when needed
- Keep state close to where it's used
- Use callbacks for state updates


## Syntax and Formatting

- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX


## UI and Styling

- Use Shadcn UI components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Ensure responsive design for various screen sizes
- When adding new shadcn component, document the installation command


## Error Handling

- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully


## Testing

- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different browsers and devices


## Security

- Sanitize user inputs
- Handle sensitive data properly
- Implement proper CORS handling in API routes


## Git Usage

Commit Message Prefixes:

- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks


Rules:

- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable


## Documentation

- Maintain clear README with setup instructions
- Document API interactions and data flows
- Don't include comments unless it's for complex logic


## Development Workflow

- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog


## File Operations

- Use PowerShell commands:
  - `New-Item -ItemType Directory/File -Path "path"`
  - `Remove-Item "path"`
  - `Move-Item "src" "dest"`
  - `Copy-Item "src" "dest"`
- Verify operations succeed
- Handle errors properly


## SEO Content Optimizer Specific

- Implement client-side SEO metrics calculations
- Ensure real-time keyword analysis and frequency calculations
- Handle location-based content optimization
- Optimize performance for large text inputs
- Implement proper error handling for external services
- Maintain responsive UI during analysis
- Ensure proper animations and transitions
- Support accessibility features